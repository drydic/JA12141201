/*
 * 异常处理：
 * 1.runtime异常：程序员--抛出   Vs JVM--自动处理
 * 2.checked异常：程序员--抛出  程序员---手动处理
 * 
 * checked异常处理：
 * 1：throws
 * 2：try catch finally
 * 程序员考虑：
*1、什么时候会发生异常？
*2、发生的是什么异常？----runtime   checked
*3、根据异常类型来考虑异常怎么处理
*    a、runtime    JVM		
*    b、checked：				when？					how											--某个上级解决--->继续执行
*    	|――？throws ===不知道如何解决的情况下			函数签名：throws + checked异常类名	--抛给调用者 --调用者处理 --上级都解决不了-->JVM
*    	|――？try catch ===不知道怎么解决情况下
*/
//自定义checked异常 ：继承
class FuException extends Exception{
	public FuException(){}
	public FuException(String message){
		super(message);
	}
}
/*判断异常-------抛出代码-----处理异常
 * runtime      代码              JVM
 * checked =========程序员处理============
 * 分离
 * 
 * 
 * */
class Demo{
	public void run(int[] arr, int index){
		if (arr==null) {
			throw new NullPointerException("JVM空指针异常");
		}
		if (index >= arr.length) {
			throw new ArrayIndexOutOfBoundsException("JVM：index大于数组的长度");
		}else if (index < 0) {
			
			throw new FuException("程序员处理：index负数");
		}
	}
}


public class DiyTest {
	public static void main(String[] args) {
		
	}
}
